class @FR2.CommentFormHandler
  constructor: ($formWrapper, initialized)->
    @formWrapper = $formWrapper

    @commentFormStore = new FR2.CommentFormStore this
    @commentFormLoadHandler = new FR2.CommentFormLoadHandler this
    @commentFormSubmissionHandler = new FR2.CommentFormSubmissionHandler this
    @commentFormFileUploader = new FR2.CommentFormFileUploader this
    @commentFormSuccessHandler = new FR2.CommentFormSuccessHandler this

    @startComment()
    @initialized = initialized

    if window.location.hash == "#open-comment"
      @openCommentFromUrlHash()


  commentFormReady: ->
    @removeEvents()

    @commentForm.initialize()
    @commentFormFileUploader.initialize()

    unless @initialized
      @addEvents()
      @decorate()

    @refreshDocStickyNav()

  successPageReady: ->
    @commentFormSuccessHandler.initialize()
    @refreshDocStickyNav()

  removeEvents: ->
    @formWrapper.unbind()

  addEvents: ->
    @previewComment()
    @startCommentOver()

  decorate: ->
    @addPublicIcons()
    @addTooltipToPublicIcons()
    @improveUploadButton()

  commentFormEl: ->
    @commentForm.commentFormEl()

  commentWrapper: ->
    $('.comment_wrapper')

  refreshDocStickyNav: ->
    $('.content-nav-wrapper .content-nav').sticky('refresh')

  previewComment: ->
    @commentFormEl().on 'click', '.comment_preview', (e)=>
      e.preventDefault()

      fields = @commentForm.previewFields()
      html = @renderCommentSummary fields

      modalTitle    = 'Preview your comment'
      modalData     = fields

      compiledTemplate = HandlebarsTemplates['comment_summary']
      modalHtml        = compiledTemplate({
        fields: modalData
      })

      FR2.Modal.displayModal(
        modalTitle,
        modalHtml,
        {modalClass: "comment-preview-modal"}
      )

  renderCommentSummary: (fields)->
    template = HandlebarsTemplates['comment_summary']
    template fields

  addPublicIcons: ->
    items = @commentFormEl().find '.inputs li'

    items.each((i, li)->
      $li = $(li)
      if $li.hasClass 'public'
        el = $li
          .find ' > :input'
          .last()

        if el.prop('id') == 'comment_general_comment' || el.prop('id') == 'fileupload'
          tooltipGravity = 'e'
        else
          tooltipGravity = 'w'

        el
          .after(
            $('<span>')
              .addClass 'public icon-fr2 icon-fr2-globe'
              .data 'tooltip-gravity', tooltipGravity
          )
    )

  addTooltipToPublicIcons: ->
    @commentFormEl().find('.inputs span.public').each((i, el)->
      el = $(el)

      tooltip = el.siblings('input').data('tooltip')
      if tooltip?
        el.data('tooltip', tooltip)
      else
        el.data('tooltip', "Information entered in this field will be publically viewable on Regulations.gov")

      className = "form-tooltip #{el.siblings('input').prop('type')}"
      tooltipPosition = if el.data('tooltip-gravity') == 'e' then 'centerLeft' else 'centerRight'
      tooltipHorizontalOffset = if el.data('tooltip-gravity') == 'e' then -10 else 5

      CJ.Tooltip.addFancyTooltip(
        $(el),
        {
          fade: true
          className: className
          opacity: 1
        },
        {
          horizontalOffset: tooltipHorizontalOffset
          position: tooltipPosition
          verticalOffset: -5
        }
      )
    )

  fileUploadButton: ->
    @commentFormEl().find '#fileupload'

  fileUploadButtonWrapper: ->
    @commentFormEl().find '.fileupload-button'

  improveUploadButton: ->
    addFileButton = $('<div>')
    addFileButton
      .addClass 'add_file button'
      .text 'Add a file'
      .prepend(
        $('<span>').addClass 'icon-fr2 icon-fr2-add'
      )

    @fileUploadButtonWrapper().append addFileButton

    @fileUploadButton().on 'hover', ()=>
      addFileButton.toggleClass('hover')

  loadCommentForm: ->
    @commentFormLoadHandler.load()

  openCommentFromUrlHash: ->
    # we want the dom element so we can check for existence rather than
    # a jquery empty set []
    link = @formWrapper.find('a#start_comment[data-comment=1]').get(0)

    if link
      $(link).trigger 'click'
    else
      modalTitle = "Comment Submission Not Available"
      modalHtml = "This document is not open for comment or is not available for comment submission on FederalRegister.gov. You may want to check the DATES, ADDRESSES, or FOR FURTHER INFORMATION CONTACT sections of this document."
      FR2.Modal.displayModal modalTitle, modalHtml

  submitCommentForm: ->
    @commentFormStore.storeComment()
    @trackCommentFormSubmitStart()
    @commentFormSubmissionHandler.submit()

  startComment: ->
    @formWrapper.on 'click', 'a#start_comment[data-comment=1]', (e)=>
      e.preventDefault()

      window.location.hash = '#open-comment'
      @trackCommentFormOpenStart()
      @loadCommentForm()

  trackCommentFormOpenStart: ->
    @trackCommentEvent 'Comment: Open Comment Form Start'

  trackCommentFormStartOver: ->
    @trackCommentEvent 'Comment: Comment Form Start Over'

  trackCommentFormSubmitStart: ->
    @trackCommentEvent 'Comment: Submit Comment Form Start'

  trackCommentEvent: (category)->
    wrapper = $('#comment-bar')

    agency = wrapper.data('reggov-agency')
    documentNumber = wrapper.data('document-number')

    FR2.Analytics.trackCommentEvent category, agency, documentNumber

  startCommentOver: ->
    @commentFormEl().on 'click', 'a#comment-start-over', (e)=>
      e.preventDefault()

      @trackCommentFormStartOver()

      @commentFormStore.clearSavedFormState()
      @commentForm.reset()
      @hideReloadedCommentInformationBox()

  updateCommentHeader: ->
    flashMessage = $('#comment-bar.comment p')
    commentFormHandler = this

    flashMessage
      .find '.button'
      .fadeOut 400, ()->
        flashMessage
          .closest 'div'
          .addClass 'open'

        flashMessage.html(
          HandlebarsTemplates['new_comment_byline']({
            commentDueDate: $('.comment_form_wrapper').data('comment-close-per-regs-dot-gov')
          })
        )

        flashMessage.find('#close-comment-form').on 'click', (e)->
          e.preventDefault()

          window.location.hash = ''
          commentFormHandler.closeCommentForm()

  closeCommentForm: ->
    @commentWrapper().slideUp 400, =>
      @resetCommentHeader()
      @refreshDocStickyNav()

  resetCommentHeader: ->
    commentBar = $('#comment-bar')
    data = {
      commentPeriodOpen: commentBar.data('comment-period-open')
      commentDaysRemaining: commentBar.data('comment-days-remaining')
      commentsCloseOn: commentBar.data('comments-close-on')
      reggovCommentUrl: commentBar.data('reggov-comment-url')
    }

    $('#comment-bar.comment p').replaceWith(
      HandlebarsTemplates['comment_header'](data)
    )
    commentBar.height('inherit')
    new FR2.CommentFormHandler(commentBar, true)

  storeComment: ->
    @commentFormStore.storeComment()

  addStorageEvents: ->
    @commentFormStore.addStorageEvents()

  showReloadedCommentInformationBox: ->
    @commentFormEl().find(".comment_reloaded").show()

  hideReloadedCommentInformationBox: ->
    @commentFormEl().find(".comment_reloaded").slideUp 400, ->

  apiKey: ->
    $('#new_comment').data('api-key')

  regulationsDotGovBaseUrl: ->
    $('#new_comment').data('regulations-dot-gov-base-url')
