#=require app

class @FR2.CommentFormFileUploader
  @ATTACHED_COMMENT_MESSAGE: 'See attached file(s)'

  constructor: (commentFormHandler)->
    @fileUploadSubmissionKey = null
    @commentFormHandler = commentFormHandler
    @submissionKeyUrl = "#{@commentFormHandler.regulationsDotGovBaseUrl()}/submission-keys"
    @fileUploadUrlsUrl = "#{@commentFormHandler.regulationsDotGovBaseUrl()}/file-upload-urls"
    @uploadedFiles = []

  initialize: ->
    @attachUploader()
    @addCompleteEvents()
    @addUploadEvents()
    @addDestroyEvents()
    @displayAttachmentErrors()
    @commentForm().uploaderReady true

  commentForm: ->
    @commentFormHandler.commentForm

  commentFormEl: ->
    @commentForm().commentFormEl()

  commentField: ->
    @commentFormEl()
      .find '#comment_comment'

  attachmentContainer: ->
    @commentFormEl()
      .find '.attachments tbody'

  existingAttachments: ->
    @commentFormEl()
      .find '.attachments'
      .data 'existing'

  attachedCommentMessage: ->
    @constructor.ATTACHED_COMMENT_MESSAGE

  attachUploader: ->
    @uploaderEl = $( @commentFormEl().find('#fileupload') )

    @uploader = @uploaderEl.fileupload(
      {
        commentFormFileUploader: @,
        url: ''
        dataType: 'json',
        processQueue: [
          {
            action: 'validate',
            always: true,
            acceptFileTypes: /(\.|\/)(<%= Comment::ALLOWED_EXTENSIONS.join('|')%>)$/i
            maxFileSize: <%= Comment::MAX_FILE_SIZE %>
            maxNumberOfFiles: <%= Comment::MAX_ATTACHMENTS %>
          },
          {
            action: 'fetchUrlFromRegulationsDotGov'
          },
          {
            action: 'rejectDuplicates'
          }
        ],
        autoUpload: true,
        sequentialUploads: false,
        dataType: 'xml',
        singleFileUploads: true,
        excludeCsrfTokenHeader: true,
        filesContainer: @attachmentContainer(),
        getFilesFromResponse: (res, files) ->
          _.map res.files, (file) ->
            {
              name: file.name,
              size: file.size,
              url: null,
            }
        uploadTemplateId: null
        downloadTemplateId: null
        uploadTemplate: (o)->
          template = HandlebarsTemplates['comment_attachment_upload']
          template o
        downloadTemplate: (o)->
          template = HandlebarsTemplates['comment_attachment_complete']
          template o
        destroy: (e, data) ->
          if e.isDefaultPrevented()
            return false

          t = $(@).data('blueimp-fileupload') ||$(this).data('fileupload')
          t._transition(data.context).done ->
            $(@).remove()
            t._trigger('destroyed', e, data)
      }
    )
    .data('blueimpFileupload')

  fetchFileUploadSubmissionKey: ->
    context = this
    deferred = $.Deferred()

    unless @fileUploadSubmissionKey
      $.ajax(
        url: @submissionKeyUrl,
        type: "POST",
        contentType: "application/vnd.api+json",
        crossDomain: true,
        data: JSON.stringify({ data: { type: "submission-keys" }}),
        dataType: 'json',
        excludeCsrfTokenHeader: true,
        beforeSend: (xhr, settings) ->
          xhr.setRequestHeader(
            'x-api-key',
            context.commentFormHandler.apiKey()
          )
        success: (res, status) =>
          @fileUploadSubmissionKey = res.data.id
          deferred.resolve(@fileUploadSubmissionKey)
        error: (e) ->
          deferred.reject(e.responseJSON)
        complete: ->
      )
    else
      deferred.resolve(@fileUploadSubmissionKey)

    return deferred.promise()

  requestFileUploadUrl: (file, fileUploadSubmissionKey) ->
    context = this
    deferred = $.Deferred()

    $.ajax(
      url: @fileUploadUrlsUrl,
      type: "POST",
      contentType: "application/vnd.api+json",
      crossDomain: true,
      excludeCsrfTokenHeader: true,
      data: JSON.stringify({
        data: {
          type: "file-upload-urls",
          attributes: {
            fileName: file.name,
            submissionKey: fileUploadSubmissionKey,
            contentType: file.type
          }
        }
      }),
      dataType: 'json',
      beforeSend: (xhr, settings) ->
        xhr.setRequestHeader(
          'x-api-key',
          context.commentFormHandler.apiKey()
        )
      success: (res, status) =>
        deferred.resolve(res.data.id)
      error: (e) ->
        deferred.reject(e.responseJSON)
    )
    return deferred.promise()

  attachmentEl: ->
    $('.attachments tbody')

  filesUploading: ->
    @attachmentEl()
      .find '.template-upload'
      .not '.error'
      .length > 0

  filesWithErrors: ->
    @attachmentEl()
      .find '.template-upload.error'
      .length > 0

  uploaderInProgress: ->
    @filesUploading()

  uploaderHasErrors: ->
    @filesWithErrors()

  uploaderReady: ->
    ! @uploaderInProgress() && ! @uploaderHasErrors()

  updateUploaderStatus: (event)->
    if event == 'submit' || event == 'fail'
      @commentForm().uploaderReady false
    else if (event == 'complete' || event == 'destroy') && @uploaderReady()
      @commentForm().uploaderReady true

  addUploadEvents: ->
    @uploaderEl
      .bind 'fileuploadsubmit', (e, data)=>
        file = data.files[0]
        data.type = "PUT"
        data.data = file
        data.crossDomain = true
        data.contentType = file.type
        data.processData = false
        data.url = file.url

        @updateUploaderStatus 'submit'
        true

    @uploaderEl
      .bind 'fileuploadprocessfail', (e, data)=>
        @updateUploaderStatus 'fail'
        if data.files.error
          _.each data.context, (el, index)=>
            error = data.files[index].error
            $el = $(el)
            if error
              $el
                .closest 'tr'
                .addClass 'error'
              $el
                .find '.progress-bar'
                .html error
              $el
                .find '.button.cancel .action'
                .text 'Delete'

    # this is triggered when a file with an error is removed
    # from the file list - go figure...
    @uploaderEl
      .bind 'fileuploadfail', (e,data)=>
        @updateUploaderStatus 'destroy'

  addCompleteEvents: ->
    @uploaderEl.bind 'fileuploadcompleted', (e, data)=>
      data.commentFormFileUploader.uploadedFiles.push(data.files[0])
      if @commentField().val() == ''
        @commentField().val( @attachedCommentMessage() )

      @commentForm().storeComment()
      @updateUploaderStatus 'complete'

  addDestroyEvents: ->
    @uploaderEl.bind 'fileuploaddestroyed', (e, data) =>

      removedFileName = data.context.data('name')
      @uploadedFiles = _.without @uploadedFiles, _.findWhere(@uploadedFiles, { name: removedFileName })

      @clearCommentPlaceholder()
      @updateUploaderStatus 'destroy'

  clearCommentPlaceholder: ->
    if @commentField().val() == @attachedCommentMessage() && @attachmentContainer().children('tr:not(.error)').length == 0
      @commentField().val ''

  displayExistingAttachments: ->
    @uploader
      ._renderDownload @existingAttachments()
      .appendTo @attachmentContainer()

    @clearCommentPlaceholder()

  displayAttachmentErrors: ->
    priorValidations = @uploader._hasError
    fileUploader = this

    @uploader._hasError = (file)->
      _.each fileUploader.attachmentContainer().find('tr'), (i, el)->
        $el = $(el)
        if $el.data('name') == file.name
          file.error = 'A file with the same name has already been attached.'

      priorValidations.call(this, file)

  reset: ->
    @attachmentContainer().empty()
    @uploadedFiles = []
    @fileUploadSubmissionKey = null

$.blueimp.fileupload.prototype.processActions.fetchUrlFromRegulationsDotGov = (data, options) ->
  dfd = $.Deferred()

  uploader = data.commentFormFileUploader
  uploader.fetchFileUploadSubmissionKey()
    .then (fileUploadSubmissionKey) =>
      file = data.files[data.index]
      uploader.requestFileUploadUrl(file, fileUploadSubmissionKey)
        .done (fileUploadUrl) ->
          # Set url attribute on file so it can be retrieved during 'fileuploadsubmit'
          file.url = fileUploadUrl
          dfd.resolveWith(@, [data])
        .fail (e) ->
          data.files.error = true
          errorMessages = _.map e.errors, (error) ->
            error.title
          file.error = errorMessages.join(', ')
          dfd.rejectWith(@, [data])
  return dfd.promise()

$.blueimp.fileupload.prototype.processActions.rejectDuplicates = (data, options) ->
  dfd = $.Deferred()
  uploader = data.commentFormFileUploader
  file = data.files[data.index]

  duplicateNameDetected = _.find data.commentFormFileUploader.uploadedFiles, (uploadedFile) ->
    file.name == uploadedFile.name

  if duplicateNameDetected
    data.files.error = true
    file.error = "A file with this name has already been uploaded. Please upload a file with a unique name."
    dfd.rejectWith(@, [data])
  else
    dfd.resolveWith(@, [data])

  return dfd.promise()
