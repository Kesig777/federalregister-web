class @FR2.CommentForm
  SUBMIT_BUTTON_REFRESH_INTERVAL = 2000

  constructor: (commentFormId, commentFormHandler)->
    @commentFormId = commentFormId
    @commentFormHandler = commentFormHandler

    @notSentFieldIds = [
      '#comment_confirmation_text',
      '#comment_confirm_submission_input'
    ]

    @uploadsInProgress = false

  initialize: ->
    @addFormEvents()
    @addCommentSecret()
    @setSubmitButtonState()
    @addSubmitButtonWarningModal()
    @_updateCommentCategories()
    @_addSubmitterTypeHandling()
    @_setSubmitterType()
    @_addInlineValidations()

  commentFormEl: ->
    if @_commentFormEl == null || @_commentFormEl == undefined || @_commentFormEl == []
      $( @commentFormId )
    else
      @_commentFormEl

  commentFormFileUploader: ->
    @commentFormHandler.commentFormFileUploader

  commentFormStore: ->
    @commentFormHandler.commentFormStore

  addFormEvents: ->
    @comboBoxChangeHandler()
    @_respondToRequiredFieldChanges()
    @removeErrorsOnChange()
    @maxCharacterWarning()
    @confirmCommentSubmission()
    @formSubmit()
    @_refreshSubmitButtonStateOnInterval()
    @_addCountrySpecificRegionToggling()
    if this._multiAgencyCommentSubmissionPage()
      @_handleMultiAgencyStateChanges()

  previewFields: ->
    formData = @commentFormHandler
      .commentFormSubmissionHandler
      .formData()

    fields = []
    _.each formData, (fieldValue, fieldName) ->
      label = switch fieldName
        when 'comment' then 'Comment'
        when 'files' then 'Upload File(s)'
        when 'firstName' then 'First Name'
        when 'lastName' then 'Last Name'
        when 'city' then 'City'
        when 'stateProvinceRegion' then 'State/Province/Region'
        when 'zip' then 'ZIP/Postal Code'
        when 'country' then 'Country'
        when 'organizationType' then 'Organization Type'
        when 'organization' then 'Organization Name'
        when 'phone' then 'Phone'

      if label && fieldValue
        if fieldName == 'files' && fieldValue && fieldValue.length
          values = [fieldValue.join(", ")]
        else
          values = [fieldValue]

        fields.push({
          label: label,
          values: values
        })

    fields.files = @commentFormHandler.commentFormFileUploader.uploadedFiles || 'None attached'
    fields

  removeNotSentFields: ($els)->
    _.each @notSentFieldIds, (id)->
      $els = $els.filter("li:not(#{id})")

    $els

  getOptionValue: ($input)->
    $input.find('option[value="' + $input.val() + '"]').first().text()

  getItemValue: ($item, type)->
    $item.find(type).val()

  comboBoxChangeHandler: ->
    _.each @commentFormEl().find('li.combo'), (li)=>
      $li = $(li)
      dependencies = $li.data('dependencies')
      input = $li.find('input')

      @commentFormEl().find("select[name='comment[#{$li.data('dependent-on')}]']")
        .change ->
          parentSelect = $(this)
          parentValue = parentSelect.val()

          $li.find('select').remove()

          if dependencies[parentValue]
            currentValue = input.val()
            select = $("<select name='#{input.attr('name')}'><option></option></select>")

            _.map dependencies[parentValue], (options)->
              option = $('<option>')
              option
                .attr 'value', options[0]
                .text options[1]
              select.append option

            select.val currentValue

            input
              .prop 'disabled', true
              .hide()
              .val ''
              .after select
          else
            input
              .prop 'disabled', false
              .show()

        .change()

  addCommentSecret: ->
    commentSecret = @commentFormEl().find '#comment_secret'

    if commentSecret.val() == ''
      commentSecret.val Math.random().toString(36).substring(2,16)

  removeErrorsOnChange: ->
    @commentFormEl().on 'change', 'select', (e)->
      select = $(this)

      select
        .siblings '.inline-errors'
        .remove()
      select
        .closest 'li'
        .removeClass 'error'

    @commentFormEl().on 'change keyup', 'li.error.input', (e)->
      FR2.FormUtils.validateField this

  maxCharacterWarning: ->
    @commentFormEl().on 'change keyup', 'li.input[data-max-size]', ()->
      FR2.FormUtils.enforceCharactersRemaining this

  submitButtonWrapper: ->
    @commentFormEl().find '.button.commit'

  commentConfirmationCheckbox: ->
    @commentFormEl().find '#comment_confirm_submission'

  confirmCommentSubmission: ->
    @commentFormEl().on 'change', @commentConfirmationCheckbox(), ()=>
      @setSubmitButtonState()

  setSubmitButtonState: ()->
    #TODO: If needed, wire in the equivalent V4 uploader is ready logic.
    if @commentConfirmationChecked() && @_formPassesPrevalidation() && @uploaderReady()
      @enableSubmitButton()
    else
      @disableSubmitButton()

  commentConfirmationChecked: ->
    @commentConfirmationCheckbox().is ':checked'

  formSubmit: ->
    @commentFormEl().on 'click', '.button.commit:not(.submitting, .disabled)', (e)=>
      e.preventDefault()

      @commentFormHandler.submitCommentForm()

  storeComment: ->
    @commentFormHandler.storeComment()

  loadComment: (commentData) ->
    _.map commentData, (value, name) =>
      @commentFormEl().find("[name='" + name + "']").val(value)

  enableSubmitButton: ->
    @submitButtonWrapper()
      .removeClass 'disabled'
      .find 'input'
      .prop 'disabled', false

    @submitButtonWrapper()
      .find '.event-overlay'
      .remove()

  disableSubmitButton: ->
    @submitButtonWrapper()
      .addClass 'disabled'
      .find 'input'
      .prop 'disabled', true

    # FF doesn't propagate events on disabled elements,
    # it complete ignores them. The overlay gets around that
    # by sitting over the input to gather the click and then
    # essentially passing that click on to the proper element
    overlay = @submitButtonWrapper()
      .find '.event-overlay'

    if overlay.length == 0
      overlay = $('<div>').addClass 'event-overlay'

      overlay
        .css({
          position: "absolute"
          top: 0
          left: 0
          width: @submitButtonWrapper().outerWidth()
          height: @submitButtonWrapper().outerHeight()
          zIndex: 2000
          # IE needs a color in order for the layer to respond to mouse events
          backgroundColor: "#FFF"
          opacity: 0
        })
        .on 'click', (e)=>
          e.preventDefault()
          e.stopPropagation()
          @submitButtonWrapper()
            .trigger 'click'

      @submitButtonWrapper()
        .append overlay

  # acts as getter/setter
  uploaderReady: (status)->
    if status?
      @uploaderReadyStatus = status
      @setSubmitButtonState()

    @uploaderReadyStatus

  getSubmitButtonState: ->
    if ! @uploaderReady()
      if @commentFormFileUploader().uploaderHasErrors()
        "Some of your files have errors. Please remove the files and try again."
      else if @commentFormFileUploader().uploaderInProgress()
        "Your files are still being uploaded. Please wait until they are complete and try again."
    else if ! @commentConfirmationChecked()
      "Please read and confirm the statement regarding the submission of personal information."
    else if ! @_formPassesPrevalidation()
      "Please ensure all required fields in the form above are populated and have no errors."
    else
      false

  addSubmitButtonWarningModal: ->
    context = this
    @submitButtonWrapper().on 'click', (e)=>
      if @submitButtonWrapper().hasClass 'disabled'
        e.preventDefault()
        e.stopPropagation()

        modalTitle = 'Unable to Submit Comment'
        modalHtml  = @getSubmitButtonState()

        FR2.Modal.displayModal modalTitle, modalHtml
        context._highlightLabelsForMissingFields()

  _highlightLabelsForMissingFields: ->
    # Clear red for all labels
    $.each(this._requiredFields(), () ->
      $(this).siblings('label').removeClass('required-error')
    )

    # Apply red to missing required fields
    blankRequiredFields = _.filter(this._requiredFields(), (el) -> $(el).val() == '' )
    $.each(blankRequiredFields, () ->
      $(this).siblings('label').addClass('required-error')
    )


  reset: ->
    @commentFormEl().trigger("reset")
    @commentFormFileUploader().reset()
    @_clearSubmitterType()
    @setSubmitButtonState()

  _clearSubmitterType: ->
    # Remove 'selected' color from all submitter icons
    $('.submitter-type-js .icon-fr2').removeClass('selected')

    # Set submitter type field
    $("#comment_submitterType").val(null)

    # Toggle field visibility
    $('.submitter-section-js').addClass('cj-hidden')

  _updateCommentCategories: (displayModalonFailure = true) ->
    context = this
    $.ajax(
      url: "#{context.commentFormHandler.regulationsDotGovBaseUrl()}/agency-categories?filter[acronym]=#{context._agencyAcronym()}",
      type: "GET",
      contentType: "application/vnd.api+json",
      crossDomain: true,
      dataType: 'json',
      excludeCsrfTokenHeader: true,
      beforeSend: (xhr, settings) ->
        xhr.setRequestHeader(
          'x-api-key',
          context.commentFormHandler.apiKey()
        )
      success: (data, status) =>
        categoryDropdown = $("#comment_category")
        if data.data.length > 0
          $.each(data.data, (x) ->
            category = this.attributes.category
            categoryDropdown.append($("<option />").val(category).text(category))
          )
        else
          $('#comment_category_input').addClass('cj-hidden')
      error: (response) ->
        FR2.CommentSubmissionHoneybadger.notify("Regulations.gov error when updating comment categories", context: response)
        modalTitle = "Regulations.gov Unavailable"
        modalHtml = "
          <p>
            Regulations.gov appears to be unavailable.  You may view the comment form below, but you'll need to submit your commment a bit later.
          </p>"
        if displayModalonFailure
          FR2.Modal.displayModal modalTitle, modalHtml
    )

  _updateAgencyAcronym: (agencyAcronym) ->
    $('#comment-bar').data('reggov-agency', agencyAcronym);

  _agencyAcronym: ->
    $('#comment-bar').data('reggov-agency')

  _addSubmitterTypeHandling: ->
    context = this
    $("#new_comment").on( "click", ".submitter-type-js", () ->
      dataSubmitterTypeIdentifier = $(this).data('submitter-type')

      # Remove 'selected' color from all submitter icons
      $('.submitter-type-js .icon-fr2').each (index) -> $(this).removeClass('selected')
      # Add 'selected' color to selected submitter icon
      $(this).find('.icon-fr2').addClass('selected')

      # Deselect all radio options
      $('.submitter-type-js input:radio').prop('checked', false)

      # Select radio option for submitter type
      $(this).find('input:radio').prop('checked', true)

      # Set submitter type field
      $("#comment_submitterType").val( dataSubmitterTypeIdentifier.toUpperCase() )

      # Toggle field visibility
      $('.submitter-section-js').each( (index) ->
        if $(this).data('submitter-type') == dataSubmitterTypeIdentifier
          $(this).removeClass('cj-hidden')
        else
          $(this).addClass('cj-hidden')
      )

      # Ensure inline validations are recalculated based on fields made visible/hidden via submitter type selection
      context.setSubmitButtonState()
    )

  _formPassesPrevalidation: () ->
    _.all(this._requiredFields(), (el) ->
      $(el).val() != ""
    ) && _.all(this._visibleCharCountFields(), (el) ->
      $(el).siblings('.inline-errors:not(.warning)').length == 0
    ) 

  _visibleCharCountFields: () ->
    _.filter(this._requiredFields(), (el) ->
      $(el).is(":visible") && $(el).closest('li').data('max-size')
    )

  _requiredFields: () ->
    isVisible = (el) ->
      $(el).is(":visible")
    _.filter(this._validatableFields(), isVisible).
      concat( $("#comment_submitterType") ) #Add submitter type since it's a hidden field

  _validatableFields: () ->
    $('#new_comment .validate-required-js textarea, #new_comment .validate-required-js input, #new_comment .validate-required-js select')

  _addInlineValidations: () ->
    this._validatableFields().each () ->
      $(this).on('blur', () ->
        if $(this).closest('li').find('.inline-errors').hasClass('char-count-error-js')
          # no-op
        else if $(this).val() == ''

          $(this).closest('li').find('.inline-errors').remove()
          $(this).after("<p class='inline-errors'>This field is required</p>")
        else
          # TODO: Ensure this takes into account the length validation on the text field
          $(this).closest('li').find('.inline-errors').remove()
      )

  _respondToRequiredFieldChanges: () ->
    context = this
    $(".validate-required-js").change( (e) ->
      context.setSubmitButtonState()
    )

  _setSubmitterType: () ->
    # Must be called after _addSubmitterTypeHandling
    # We could extract the binding events to a _toggleSubmitterType function in the future and call from both initializer functions
    if @commentFormStore().hasStoredComment()
      submitterType = @commentFormStore().getStoredComment()['comment[submitterType]']
      if submitterType
        $("#comment_submitterType").val(submitterType)

        $('.submitter-type-js[data-submitter-type="' + submitterType.toLowerCase() + '"]')
          .first()
          .click()

  _refreshSubmitButtonStateOnInterval: () ->
    context = this
    this.refreshIntervalId = setInterval(
      context.setSubmitButtonState.bind(context),
      context.SUBMIT_BUTTON_REFRESH_INTERVAL
    )

  _addCountrySpecificRegionToggling: () ->
    this._updateStateProvinceRegion()
    $("#comment_country").on('change', this._updateStateProvinceRegion.bind(this) )

  _updateStateProvinceRegion: () ->
    context = this
    countryIdentifier = $("#comment_country").val()
    if countryIdentifier == 'Canada'
      context._enableSelectStateField()
      context._disableFreeTextStateField()

      canadaOptions = $('#canada-options').data('options')
      context._changeSelectOptions('Province', canadaOptions )
    else if (countryIdentifier != 'United States') && (countryIdentifier != '')
      $('.free-text-state-field-js').
        val('').
        prop('disabled', false).
        closest('li').show()

      $('.select-state-field-js').
        prop('disabled', true).
        closest('li').hide()
    else
      context._enableSelectStateField()
      context._disableFreeTextStateField()
      usaOptions = $('#usa-options').data('options')
      omitRefresh = $('.select-state-field-js').siblings('label').text() == 'State' #Check whether the select options need to be refreshed since we don't want a USA state reset if already selected
      context._changeSelectOptions('State', usaOptions, omitRefresh)

  _changeSelectOptions: (labelName, options, omitRefresh = false) ->
    selectInput = $('.select-state-field-js')
    selectInput.siblings('label').text(labelName)

    if omitRefresh
      return
    else
      selectInput.empty()
      selectInput.val('')
      selectInput.append( $("<option></option>") )
      $.each(options, (key, value) ->
        option = $("<option></option>").attr('value', value).
          attr('value', key).
          text(key)
        selectInput.append(option)
      )

  _enableSelectStateField: () ->
    $('.select-state-field-js').
      prop('disabled', false).
      closest('li').show()

  _disableFreeTextStateField: () ->
    $('.free-text-state-field-js').
      prop('disabled', true).
      closest('li').hide()

  changeFormFieldVisibilityPostMultiAgencySelection: ->
    this._showAllCommentFields()
    this._showChangeCommentRecipientLink()
    this._hideMultiAgencyFields()

  _multiAgencyForm: () ->
    $('.multi-agency-js').length > 0

  _multiAgencyCommentSubmissionPage: ->
    $('.multi-agency-js').length > 0

  _handleMultiAgencyStateChanges: ->
    context = this
    $('#new_comment').on "click", '.agency-select-btn-js', (e) ->
      context._replaceDynamicAgencyText(
        $(this).data('agencyName'),
        $(this).data('regsDotGovDocumentId'),
      )

      # Click invisible radio button to store agency selection
      $(this).prevAll('.multi-agency-radio-js').first().click()
      context._highlightSelectedAgencyButton($(this))

      # Update comment category options via regs.gov API if we detect a difference
      selectedAgencyAcronym = $(this).data('agencyAcronym')
      if context._agencyAcronym() != selectedAgencyAcronym
        context._updateAgencyAcronym(selectedAgencyAcronym)
        if selectedAgencyAcronym # The selected regs.gov doc may not always have an agency stored for the docket
          context._updateCommentCategories(false)

    $('#new_comment').on "click", '.multi-agency-radio-js', (e) ->
      context._updateCommentOnDocumentId(e.target.value)
      context.changeFormFieldVisibilityPostMultiAgencySelection()

    # Handle behavior when "Start Over" is clicked
    $('#new_comment').on "click", '#comment-start-over', (e) ->
      context._displayOnlyMultiAgencyFields()
      context._hideChangeCommentRecipientLink()

    # Handle behavior for when "Change Agency" is clicked
    $('#new_comment').on "click", '#change-recipient-fields-js', (e) ->
      e.preventDefault()
      context._displayOnlyMultiAgencyFields()
      context._clearDynamicAgencyText()
      context._hideChangeCommentRecipientLink()

  _displayOnlyMultiAgencyFields: ->
    this._uncheckMultiAgencyRadioButtons()
    this._showMultiAgencyFields()
    this._hideAllCommentFields()

  _highlightSelectedAgencyButton: (el) ->
    $('.agency-select-btn-js').removeClass('selected')
    el.addClass('selected')

  _updateCommentOnDocumentId: (regsDotGovDocumentId) ->
    $('#comment_commentOnDocumentId').val(regsDotGovDocumentId)

  _uncheckMultiAgencyRadioButtons: ->
    $("input.multi-agency-radio-js").prop("checked", false);

  _showMultiAgencyFields: ->
    this._showElement(".multi-agency-js")

  _hideMultiAgencyFields: ->
    this._hideElement(".multi-agency-js")

  _hideAllCommentFields: ->
    this._hideElement('.comment-form-fields-js')
  
  _showAllCommentFields: ->
    this._showElement('.comment-form-fields-js')

  _showChangeCommentRecipientLink: ->
    this._showElement('#change-recipient-fields-js', 'fast')
  
  _hideChangeCommentRecipientLink: ->
    this._hideElement("#change-recipient-fields-js", 'fast')

  _showElement: (selector, speed="slow") ->
    $(selector).show(speed)

  _hideElement: (selector, speed="slow") ->
    $(selector).hide(speed)

  _clearDynamicAgencyText: ->
    $("#dynamic-agency-text-js").html("")
  
  _replaceDynamicAgencyText: (agencyName, regsDotGovDocumentId) ->
    $("#dynamic-agency-text-js").html(
      Handlebars.compile(
        $('#agency-comment-selection-template').html()
      )({
        agencyName: agencyName,
        regsDotGovDocumentId: regsDotGovDocumentId
      })
    )
