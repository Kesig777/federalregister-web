class @FR2.CommentFormSubmissionHandler
  constructor: (commentFormHandler)->
    @commentFormHandler = commentFormHandler
    @regulationsDotGovCommentUrl = "#{@commentFormHandler.regulationsDotGovBaseUrl()}/comments"

  commentFormStore: ->
    @commentFormHandler.commentFormStore

  commentFormFileUploader: ->
    @commentFormHandler.commentFormFileUploader

  commentForm: ->
    @commentFormHandler.commentForm

  commentFormEl: ->
    @commentForm().commentFormEl()

  commentFormFileUploader: ->
    @commentFormHandler.commentFormFileUploader

  submitButton: ->
    @commentFormEl().find '.commit.button'

  submit: ->
    @styleSubmitButton()
    @submitForm()

  styleSubmitButton: ->
    @submitButton()
      .addClass 'submitting'
      .find 'input'
      .prop 'disabled', true
      .attr 'value', 'Submitting Comment'

  submitForm: (options)->
    context = this
    @submitCommentToRegulationsDotGov()
      .done (res, status) =>
        @persistComment(options, res.data)
      .fail (res, status) ->
        context.error(res)

  formData: ->
    regulationsDotGovAllowedFields = this._regulationsDotGovAllowedFields()

    # Extract fields that we want to pass to regulations.gov
    formElements = @commentFormEl().serializeArray()
    booleanFields = ['comment[sendEmailReceipt]']

    data = _.reduce formElements, (memo, el)->
      if el.value
        match = el.name.match(/comment\[(\w*)\]/)
        if match && _.contains(regulationsDotGovAllowedFields, match[1])
          if _.contains(booleanFields, el.name)
            selector = "input[name ='#{el.name}'"
            value = $(selector).is(':checked')
          else
            value = el.value
          memo[match[1]] = value
      memo
    , {}

    uploader = @commentFormFileUploader()

    if uploader.fileUploadSubmissionKey
      data["submissionType"] = "API"
      data["submissionKey"] = uploader.fileUploadSubmissionKey
      _.each uploader.uploadedFiles, (file) ->
        data.files ||= []
        data.files.push(file.name)

    data

  _regulationsDotGovAllowedFields: () ->
    basicFields = [
      "comment",
      "category",
      "email",
      "sendEmailReceipt",
      "commentOnDocumentId",
      "submissionType",
      "submitterType",
    ]

    submitterType = $("#comment_submitterType").val()
    #TODO: Ideally we'd dynamically get this from the DOM but we have multiple input types (select, string, etc).  Refactor if we have time.
    if submitterType == 'INDIVIDUAL'
      basicFields.concat(['firstName', 'lastName', 'city', 'stateProvinceRegion', 'zip', 'country', 'phone'])
    else if submitterType == 'ORGANIZATION'
      basicFields.concat(['organizationType', 'organization'])
    else
      basicFields

  submitCommentToRegulationsDotGov: ->
    context = this
    $.ajax {
      crossDomain: true,
      contentType: "application/vnd.api+json",
      excludeCsrfTokenHeader: true,
      beforeSend: (xhr, settings) ->
        xhr.setRequestHeader(
          'x-api-key',
          context.commentFormHandler.apiKey()
        )
      url: @regulationsDotGovCommentUrl,
      type: 'POST',
      data: JSON.stringify({
        "data": {
          "attributes": @formData(),
          "type":"comments"
        }
      })
    }

  persistComment: (options, responseData) ->
    settings = {
      url: @commentFormEl().attr 'action'
      dataType: 'html'
      type: 'POST'
      data: @commentFormEl().serialize()
    }

    agency = @commentFormEl().data('agency')
    documentNumber = @commentFormEl().data('document-number')

    submitHandler = this

    $.extend settings, options

    # Example Response from reg.gov
    # data = {
    #   "reg_gov_response_data": {
    #     "id": "klb-dy99-pl2c",
    #     "type": "comments",
    #     "attributes": {
    #         "zip":                 null,
    #         "country":             null,
    #         "lastName":            "Anonymous",
    #         "city":                null,
    #         "receiveDate":         "2021-02-18T21:37:52.238+0000",
    #         "submissionKey":       null,
    #         "submitterRep":        null,
    #         "userId":              "b3bda779-8165-4c17-ad31-f3389d77af3c",
    #         "organizationType":    null,
    #         "firstName":           "Anonymous",
    #         "submissionType":      "API",
    #         "submitterType":       "ANONYMOUS",
    #         "commentOnDocumentId": "CPSC-2013-0025-0004",
    #         "stateProvinceRegion": null,
    #         "phone":               null,
    #         "organization":        null,
    #         "sendEmailReceipt":    false,
    #         "numItemsReceived":    0,
    #         "files":               null,
    #         "comment":             "test comment",
    #         "category":            null,
    #         "email":               null
    #     }
    #   }
    # }

    settings.url = "/my/documents/#{documentNumber}/comments"
    settings.data = {
      "reg_gov_response_data": responseData
    }

    $.ajax {
     url: settings.url
     type: settings.type
     dataType: settings.dataType
     data: settings.data
     success: (response)->
       submitHandler.success response
       submitHandler.trackCommentFormSubmissionSuccess()
     headers: {
       'X-CSRFToken': window.getAuthenticityTokenFromHead()
     }
     error: (response)->
       if response.status == 422
         submitHandler.trackCommentFormSubmissionError(
           'Comment: Submit Comment Form Validation Error'
         )
       else
         submitHandler.trackCommentFormSubmissionError(
           "Comment: Submit Comment Form Error #{response.error}"
         )

       submitHandler.error response
    }

  trackCommentFormSubmissionSuccess: ->
    @commentFormHandler.trackCommentEvent 'Comment: Submit Comment Form Success'

  trackCommentFormSubmissionError: (category)->
    @commentFormHandler.trackCommentEvent category

  success: (response)->
    @commentFormHandler.successPageReady()

    @_rollUpCommentAndFinalize response, () =>
      @commentFormStore().clearSavedFormState()
      @commentFormFileUploader().reset()

  error: (response)->
    if response.getResponseHeader('Regulations-Dot-Gov-Over-Rate-Limit') == "1"
      FR2.CommentSubmissionHoneybadger.notify("Regulations.gov Over Rate Limit", context: response)
      reggov_url = @commentFormHandler.commentFormLoadHandler.formWrapper().data('reggov-comment-url')

      modalTitle = "Over Rate Limit"
      modalHtml = "
        <p>
          We were unable to successfully submit your comment at this time because Regulations.gov
          has received too many comments in the last hour.
        </p>
        <p>
          Please try submitting your comment again later, attempt to comment directly via Regulations.gov at
          <a href='#{reggov_url}'>#{reggov_url}</a>, or via any other method
          described in the document.
        </p>"
      FR2.Modal.displayModal modalTitle, modalHtml
    else if response.status == 400
      errorDetails = response.responseJSON.errors[0].title
      FR2.CommentSubmissionHoneybadger.notify("Regulations.gov HTTP 400 on Submission", context: response, fingerprint: errorDetails)
      modalTitle = "Submission Error"
      modalHtml = "
        <p>
          We were unable to successfully submit your comment at this time due to a submission error at Regulations.gov:
        </p>
        <p>
        #{errorDetails}
        </p>"
      FR2.Modal.displayModal modalTitle, modalHtml
    else if response.status == 503
      FR2.CommentSubmissionHoneybadger.notify("Regulations.gov is Unavailable (503): #{response.responseText}", context: response)
      modalTitle = "Regulations.gov is Currently Unavailable"
      modalHtml = "
        <p>
          Comments are submitted to Regulations.gov, but their system is currently unavailable.
        </p>"
      FR2.Modal.displayModal modalTitle, modalHtml
    else if response.status == 404
      FR2.CommentSubmissionHoneybadger.notify("Regulations.gov Not Found Error (404)", context: response)
      modalTitle = "Comment Submission Error"
      modalHtml = "
        <p>
          Regulations.gov didn't recognize the regulations.gov document id we have on file for this document.  Please try again later.
        </p>"
      FR2.Modal.displayModal modalTitle, modalHtml
    else if response.status == 500
      FR2.CommentSubmissionHoneybadger.notify("Regulations.gov Server Error (500): #{response.responseText}", context: response)
      modalTitle = "Comment Submission Error"
      modalHtml = "
        <p>
          We encountered an unexpected error when attempting to submit your comment to Regulations.gov
        </p>"
      FR2.Modal.displayModal modalTitle, modalHtml
    else
      FR2.CommentSubmissionHoneybadger.notify("Unhandled Regulations.gov Error #{response.status}: #{response.responseText}", context: response)
      modalTitle = "Comment Submission Error"
      modalHtml = "
        <p>
          We encountered an unexpected error when attempting to submit your comment to Regulations.gov
        </p>"
      FR2.Modal.displayModal modalTitle, modalHtml

    # Re-enable submit button to ensure users can attempt a resubmission since we're no longer refreshing the form via AJAX.
    @submitButton()
      .removeClass 'submitting'
      .find 'input'
      .prop 'disabled', false
      .attr 'value', 'Submit Comment'

  _rollUpCommentAndFinalize: (response, afterAnimation)->
    commentWrapper = $('.comment_wrapper')

    $('#comment-bar.comment')
      .scrollintoview {duration: 400}

    commentWrapper.slideUp 400, ->
      commentWrapper.html(response).slideDown 800
      afterAnimation response
