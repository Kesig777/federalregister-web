function add_textarea_expander(field) {
  $(field).TextAreaExpander(100, 1000);
}

function form_has_previously_saved_state(document_number) {
  var stored_state = amplify.store(document_number);
  return  stored_state !== undefined;
}

function previously_saved_form_data(document_number) {
  return amplify.store(document_number);
}

function clear_saved_form_state(document_number) {
  amplify.store(document_number, null);
}
$(function () {

  var comment_form_submission_handler = {
        form: null,
        submit_button: null,

        initialize: function(form) {
          var submission_handler = this;
          
          submission_handler.form = $(form);
          submission_handler.submit_button = submission_handler.form.find('.commit.button');

          return submission_handler;
        },

        submit: function() {
          this.style_submit_button_on_submit();
          this.ajax_submit({type: 'POST'});
        },

        style_submit_button_on_submit: function() {
          this.submit_button.addClass('disabled');
          this.submit_button.find('input').disable().attr('value', 'Submitting Comment');
        },

        success: function(response) {
          var comment_form = $('.comment_wrapper');

          $('.ajax-comment-data').animate({height: '42px'}, 400);
          $('.ajax-comment-data').scrollintoview({duration: 400});
          comment_form.slideUp(400, function() { 
            comment_form.remove();

            var success_page = $('<div>').addClass('comment_wrapper').html(response);
            success_page.hide();
            $('.ajax-comment-data').append( success_page );

            $('.ajax-comment-data').animate({height: success_page.css('height')}, 800);
            success_page.slideDown(800);            
          });
          clear_saved_form_state( $('.comment_form_wrapper').data('comment-document-number') );
        },

        error: function(response) {
          $('.comment_wrapper').html(response.responseText);
          initializeCommentForm();

          $('.comment_wrapper .instructions').scrollintoview({duration: 200});
        },

        ajax_submit: function(options) {
          var submission_handler = this;

          var settings = {
            url: submission_handler.form.attr('action'),
            dataType: 'html',
            type: 'POST',
            data: submission_handler.form.serialize()
          }
          $.extend(settings, options);
          
          $.ajax({
            url: settings.url,
            type: settings.type,
            dataType: settings.dataType,
            data: settings.data,
            success: function(response) {
              submission_handler.success(response);
            },
            error: function(response) {
              submission_handler.error(response);
            }
          });
        }
      };

  var comment_form_load_handler = {
        comment_link: null,
        comment_div: null,
        comment_form: null,
        loading_div: null,
        document_number: null,
        ajax_options: null,

        initialize: function() {
          var form_load_handler = this;

          form_load_handler.comment_link = $('#flash_message.comment a#start_comment');
          form_load_handler.comment_div = $('<div>').addClass('ajax-comment-data');

          form_load_handler.comment_div.hide();
          $('#flash_message.comment').after( form_load_handler.comment_div );

          form_load_handler.loading_div = $('<div>').addClass('loading').append(
                                            $('<span>').addClass('loader').html('Loading Comment Form')
                                          );
          form_load_handler.document_number = $('.doc_number').text();

          return form_load_handler;
        },

        ui_trigger_loading: function() {
          this.comment_div.append( this.loading_div );
          this.comment_div.slideDown(800);
        },

        generate_ajax_options: function() {
          if( this.has_stored_state() ) {
            this.ajax_options = {
              url: "/my/articles/" + this.document_number + "/comments/reload",
              type: 'POST',
              data: this.get_stored_state()
            }
          } else {
            this.ajax_options = {url: "/my/articles/" + this.document_number + "/comments/new" };
          }
        },

        has_stored_state: function() {
          return amplify.store(this.document_number) !== undefined;
        },

        get_stored_state: function() {
          return amplify.store(this.document_number);
        },

        load: function() {
          this.ui_trigger_loading();
          this.generate_ajax_options();
          this.ajax_submit();
        },

        ajax_submit: function() {
          var form_load_handler = this;

          var settings = {
            url: '',
            dataType: 'html',
            type: 'GET',
            data: ''
          }
          $.extend(settings, this.ajax_options);

          $.ajax({
            url: settings.url,
            type: settings.type,
            dataType: settings.dataType,
            data: settings.data,
            timeout: 30000,
            success: function(response) {
              form_load_handler.success(response);
            },
            error: function(response) {
              form_load_handler.error(response);
            }
          });
        },

        success: function(response) {
          var form_load_handler = this;

          form_load_handler.generate_comment_form(response);

          form_load_handler.loading_div.fadeOut(600, function() {
            $('#flash_message.comment p .button').fadeOut(400);
            $('.ajax-comment-data').css('height', '42px').animate({
              height: form_load_handler.comment_form.css('height')
            }, 800);
            form_load_handler.comment_form.slideDown(800);
          });
        },

        error: function() {
          var form_load_handler = this;
          window.location = $(form_load_handler.comment_link).attr('href');
          // alert('We\'re unable to retrieve the comment form from Regulations.gov at the moment.');
        },

        generate_comment_form: function(response) {
          this.comment_form = $('<div>').addClass('comment_wrapper').html(response);
          this.comment_form.hide();
          this.comment_div.append(this.comment_form);

          initializeCommentForm();
        }
      };


  var commentForm = {
    parseFields: function() {
      var fields = [];
      $('#new_comment .inputs > ol > li').each(function(i,elem) {

        var list_item = $(elem);
        var key = list_item.find('label').text().replace('*','');
        var field = {'label' : key};

        if (list_item.hasClass('combo')) {
          var select = $(list_item.find('select').first());
          if (select.length) {
            field.values = [select.find('option[value="' + select.val() + '"]').first().text()];
          }
          else {
            field.values = [list_item.find('input').val()];
          }
        } else if(list_item.hasClass('stringish')) {
          field.values = [list_item.find('input').val()];
        } else if(list_item.hasClass('text')) {
          field.values = [list_item.find('textarea').val()];
        } else if (list_item.hasClass('select')) {
          var input = $(list_item.find('select').first());
          field.values = [input.find('option[value="' + input.val() + '"]').first().text()];
        } else if (list_item.hasClass('file')) {
          field.values = list_item.find('.attachments tr').map(function (i,elem) {return $(elem).data('name')});
        }

        fields.push(field);
      });
      return fields;
    }
  }

  var initializeCommentForm = function() {
    var renderCommentSummary = function(fields) {
      var source   = $("#comment-summary-template").html();
      var template = Handlebars.compile(source);
      template(fields);
    };

    $('#metadata_content_area').delegate('.comment_preview', 'click', function(event) {
      event.preventDefault();

      var fields = commentForm.parseFields();
      var html   = renderCommentSummary(fields);

      Handlebars.registerPartial('comment_summary', $('#comment-summary-template').html());
      var source   = $("#comment-preview-template").html();
      var template = Handlebars.compile(source);

      var modal = $(template({"fields":fields}));
      $('body').append(modal);
      modal.find(".jqmClose").bind('click', function (event) {
        modal.remove();
      });

      modal.addClass('jqmWindow');
      modal.jqm({
          modal: true,
          toTop: true
      });
      modal.jqmShow().centerScreen();
    });

    $('#new_comment li.combo').each(function() {
      var li = $(this);
      var dependencies = li.data('dependencies');
      var input = li.find('input');

      $('#new_comment select[name="comment[' + li.data('dependent-on') + ']"]').change(function() {
        var parent_select = $(this);
        var parent_value = parent_select.val();

        li.find('select').remove();

        if (dependencies[parent_value]) {
          var current_value = input.val();
          var select = $('<select name="' + input.attr('name') + '"><option></option></select>');
          $.map(dependencies[parent_value], function(options) {
            var option = $('<option>').first();
            option.attr('value', options[0]);
            option.text(options[1]);
            select.append(option);
          });
          select.val(current_value);

          input.attr('disabled', 'disabled').hide().val('').after(select);
        } else {
          input.removeAttr('disabled').show();
        }
      }).change();
    });

    if ($('#comment_secret').val() === '') {
      $('#comment_secret').val(Math.random().toString(36).substring(2,16));
    }

    /* initialize local storage of user's form progress */
    var commentFormStore = commentFormStorage.initialize( $('.formtastic.comment') );

    var attachedCommentMessage = 'See attached file(s)';

    var commentField = $('#comment_general_comment');
    /* make commentField automatically expand when needed as user types */
    add_textarea_expander(commentField);
    
    var container = $('.attachments tbody');
    var existing_attachments = $.parseJSON($('.attachments').data("existing"));
    var clearoutCommentPlaceholder = function (e, data) {
      if(commentField.val() === attachedCommentMessage && container.children('tr:not(.error)').size() === 0) {
        commentField.val('');
      }
    };

    var uploader = $('#fileupload').fileupload({
      url: '/my/comment_attachments',
      autoUpload: true,
      maxNumberOfFiles: <%= Comment::MAX_ATTACHMENTS %>,
      maxFileSize: <%= CommentAttachment::MAX_FILE_SIZE %>,
      acceptFileTypes: /(\.|\/)(<%= CommentAttachment::ALLOWED_EXTENSIONS.join('|')%>)$/i,
      formData: {
        'comment_attachment[secret]': $('#comment_secret').val()
      },
      filesContainer: container,
      prependFiles: true,
      uploadTemplateId: null,
      downloadTemplateId: null,
      uploadTemplate: function (o) {
        var source   = $("#comment-attachment-upload-template").html();
        var template = Handlebars.compile(source);
        return template(o);
      },
      downloadTemplate: function (o) {
        var source   = $("#comment-attachment-complete-template").html();
        var template = Handlebars.compile(source);
        return template(o);
      }
    }).
      bind('fileuploaddestroyed', clearoutCommentPlaceholder).
      bind('fileuploadcompleted', function (e, data) {
        if(commentField.val() === '') {
          commentField.val(attachedCommentMessage);
        }
        /* ensure form gets saved to local store after upload */
        commentFormStore.storeComment();
      }).
      data('fileupload');

    if(uploader) {
      uploader._renderDownload(existing_attachments).appendTo(container);

      clearoutCommentPlaceholder();

      var priorValidations = uploader._hasError;
      uploader._hasError = function(file) {
        container.find('tr').each(function(i,elem){
          if($(elem).data('name') == file.name) {
            file.error = 'A file with the same name has already been attached.'
          }
        });
        return priorValidations.call(this, file);
      };
    }

    /* add public icons where appropriate */
    $('.formtastic.comment .inputs li').each(function() {
      var $li = $(this);
      if( $li.hasClass('public') ) {
        $li.find(' > :input').last().after( $('<span>').addClass('public') );
      }
    });

    /* add tipsy for public (world) icon */
    $('.formtastic.comment .inputs span.public').tipsy( {gravity: 's', fallback: "This field will be publically viewable.", fade: true, offset: 4});

    
    /* make the file upload button pretty */
    var add_file_button = $('<div>').addClass('add_file button').text('Add a file');
    $('#fileupload').after( add_file_button );
    $('#metadata_content_area').delegate('.add_file', 'click', function() {
      $('#fileupload').trigger('click');
    });
    $('#fileupload').hide();


    /* add events for max characters in a text field */
    $('#metadata_content_area').delegate('.formtastic.comment li.input[data-max-size]', 'change', function() {
      enforce_characters_remaining(this);
    });
    $('#metadata_content_area').delegate('.formtastic.comment li.input[data-max-size]', 'keyup', function() {
      enforce_characters_remaining(this);
    });

    /* add events to clear validation errors */
    $('#metadata_content_area').delegate('.formtastic.comment li.error.input', 'keyup', function() {
      validate_field(this);
    });
    $('#metadata_content_area').delegate('.formtastic.comment li.error.input', 'change', function() {
      validate_field(this);
    });

    /* add event to submit form */
    $('#metadata_content_area').delegate('.formtastic.comment .button.commit:not(.disabled)', 'click', function() {
      $(this).closest('form').submit();
    });

    /* handle form submission */
    $('#metadata_content_area').delegate('.formtastic.comment', 'submit', function(event) {
      event.preventDefault();
      var $form = $(this),
          handler = comment_form_submission_handler.initialize($form);

      handler.submit();
    });

  };

  $('#metadata_content_area').delegate('a#start_comment[data-comment=1]', 'click', function(event) {
    event.preventDefault();
    var handler = comment_form_load_handler.initialize();

    handler.load();
  });


  $('#metadata_content_area').delegate('a#comment-start-over', 'click', function(event) {
    event.preventDefault();

    var document_number = $('.doc_number').text(),
        comment_form = $('.ajax-comment-data');

    clear_saved_form_state(document_number);

    //$('.ajax-comment-data').animate({height: '42px'}, 400);
    comment_form.slideUp(400, function() { 
      comment_form.remove();
      var handler = comment_form_load_handler.initialize();

      handler.load();
    });
  });

  $('#metadata_content_area').delegate('a#print-comment', 'click', function(event) {
    event.preventDefault();

    var $link = $(this),

        modal_title    = 'Print your comment',
        modal_template = $("#comment-print-summary-template"),
        modal_data     = $link.data('comment-data'),
      
        compiled_template = Handlebars.compile( modal_template.html() ),
        modal_html        = compiled_template(  { fields: modal_data, 
                                                  document_details: $link.data('current-document-details'), 
                                                  comment_details: $link.data('comment-details')
                                                } );

        display_fr_modal(modal_title, modal_html, $link, {modalClass: "print_modal"});

    $('body').addClass('hide_body_content');
  });

  $('#metadata_content_area').delegate('a#print-comment', 'modalClose', function(event) {
    $('body').removeClass('hide_body_content');
  });

  $('body').delegate('#fr_modal .print_button', 'click', function(event) {
    event.preventDefault();
    window.print();
  });

});
